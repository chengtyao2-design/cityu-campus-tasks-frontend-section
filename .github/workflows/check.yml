name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint
      
    - name: Run TypeScript type check
      working-directory: ./frontend
      run: npm run type-check
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black mypy
        
    - name: Run Black formatter check
      working-directory: ./backend
      run: black --check .
      
    - name: Run Flake8 linter
      working-directory: ./backend
      run: flake8 . --max-line-length=88 --extend-ignore=E203,W503
      
    - name: Run MyPy type check
      working-directory: ./backend
      run: mypy . --ignore-missing-imports
      
    - name: Test backend startup
      working-directory: ./backend
      run: |
        timeout 10s python main.py || code=$?
        if [[ $code -ne 124 && $code -ne 0 ]]; then
          echo "Backend failed to start"
          exit 1
        fi
        echo "Backend started successfully"

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && pip install -r requirements.txt
        
    - name: Start backend server
      working-directory: ./backend
      run: python main.py &
      
    - name: Wait for backend
      run: |
        timeout 30s bash -c 'until curl -f http://localhost:8000/health; do sleep 1; done'
        
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Health check integration
      run: |
        response=$(curl -s http://localhost:8000/health)
        echo "Backend response: $response"
        if [[ $response == *"healthy"* ]]; then
          echo "✅ Integration test passed"
        else
          echo "❌ Integration test failed"
          exit 1
        fi